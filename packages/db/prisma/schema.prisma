generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  FREE
  PAID
}

enum ResumeState {
  NOT_STARTED
  EDITING
  COMPLETED
  DOWNLOADING
  DOWNLOAD_SUCCESS
  DOWNLOAD_FAILED
}

enum SubscriptionDuration {
  THIRTY_DAYS
  NINETY_DAYS
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

model User {
  id            String             @id @default(cuid())
  email         String             @unique
  name          String?
  token         String?
  profilePhoto  String?
  password      String
  status        UserStatus         @default(FREE)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  sessions      Session[]
  resumes       Resume[]
  subscriptions UserSubscription[]
}

model SubscriptionPlan {
  id            String               @id @default(cuid())
  name          String // e.g., "30 Day Plan", "90 Day Plan"
  duration      SubscriptionDuration
  price         Float
  description   String?
  features      String[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  subscriptions UserSubscription[]
}

model UserSubscription {
  id        String             @id @default(cuid())
  userId    String
  planId    String
  startDate DateTime           @default(now())
  endDate   DateTime
  status    SubscriptionStatus @default(ACTIVE)
  paymentId String? // Reference to payment if you have a payment system
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      SubscriptionPlan   @relation(fields: [planId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  personalInfo PersonalInfo?
  education    Education[]
  experience   Experience[]
  skills       Skill[]
  coreSkills   CoreSkill[]
  languages    Language[]
  achievements Achievement[]
  projects     Project[]
  certificates Certificate[]
  state        ResumeState   @default(NOT_STARTED)
  templateId   String
  updatedAt    DateTime?     @updatedAt
  size         String?
  createdAt    DateTime?
}

model PersonalInfo {
  id       String  @id @default(cuid())
  resumeId String  @unique
  resume   Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name     String
  title    String
  website  String?
  email    String?
  phone    String?
  bio      String?
  linkedin String?
  location String?
}

model Education {
  id          String  @id @default(cuid())
  resumeId    String
  resume      Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  institution String
  major       String?
  start       String
  end         String
  degree      String
  score       String?
}

model Experience {
  id               String   @id @default(cuid())
  resumeId         String
  resume           Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  company          String
  role             String
  start            String
  end              String
  responsibilities String[]
  current          Boolean? @default(false)
}

model Skill {
  id       String @id @default(cuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name     String
}

model CoreSkill {
  id       String @id @default(cuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name     String
}

model Language {
  id       String @id @default(cuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name     String
}

model Achievement {
  id          String @id @default(cuid())
  resumeId    String
  resume      Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  title       String
  description String
}

model Project {
  id               String   @id @default(cuid())
  resumeId         String
  resume           Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name             String
  link             String
  start            String
  end              String
  responsibilities String[]
}

model Certificate {
  id       String @id @default(cuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name     String
  issuer   String
  issuedOn String
}
